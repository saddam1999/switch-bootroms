/*
 * Copyright (c) 2016 NVIDIA Corporation.  All rights reserved.
 *
 * NVIDIA Corporation and its licensors retain all intellectual property
 * and proprietary rights in and to this software and related documentation
 * and any modifications thereto.  Any use, reproduction, disclosure or
 * distribution of this software and related documentation without an express
 * license agreement from NVIDIA Corporation is strictly prohibited.
 */

#ifndef INCLUDE_NVBOOT_AES_TEST_VECTORS_H
#define INCLUDE_NVBOOT_AES_TEST_VECTORS_H

uint8_t aes_key_128[] __attribute__ ( ( aligned(4) ) ) =
                    {   0xff, 0x01, 0x34, 0xa2, 0xef, 0x23, 0x14, 0xb3,
                        0x57, 0x9c, 0xa4, 0x4f, 0x62, 0x1e, 0x8b, 0x27,
                    };

uint8_t aes_key_256[] __attribute__ ( ( aligned(4) ) ) =
                    {   0xff, 0x01, 0x34, 0xa2, 0xef, 0x23, 0x14, 0xb3,
                        0x57, 0x9c, 0xa4, 0x4f, 0x62, 0x1e, 0x8b, 0x27,
                        0x56, 0x19, 0xa9, 0xef, 0x1b, 0x3f, 0x24, 0x35,
                        0x85, 0x90, 0x3a, 0xff, 0x3f, 0x72, 0xd3, 0x42,
                    };

uint8_t aes_plaintext_key128[] __attribute__ ( ( aligned(4) ) ) =
                    {
                        0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22,
                        0x33, 0x33, 0x33, 0x33, 0x44, 0x44, 0x44, 0x44,
                        0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22,
                        0x33, 0x33, 0x33, 0x33, 0x44, 0x44, 0x44, 0x44,
                    };

uint8_t aes_plaintext_key256[] __attribute__ ( ( aligned(4) ) ) =
                      { 0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22,
                        0x33, 0x33, 0x33, 0x33, 0x44, 0x44, 0x44, 0x44,
                        0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22,
                        0x33, 0x33, 0x33, 0x33, 0x44, 0x44, 0x44, 0x44
                      };

// The ciphertext of aes_plaintext_key128, using aes_key_128.
uint8_t aes_ciphertext_key128[] __attribute__ ( ( aligned(4) ) ) =
                    {
                        0x35, 0x00, 0x9b, 0x50, 0x80, 0x35, 0x75, 0x86,
                        0x2d, 0x86, 0x71, 0x94, 0x75, 0xc4, 0x20, 0x07,
                        0x5c, 0xcd, 0xf2, 0x49, 0x8c, 0x53, 0x10, 0x12,
                        0x57, 0x6d, 0x3b, 0xfd, 0xb8, 0x96, 0x04, 0x81,
                    };

// The ciphertext of aes_plaintext_key256, using aes_key_256.
uint8_t aes_ciphertext_key256[] __attribute__ ( ( aligned(4) ) ) =
                    {
                        0x26,0x32,0x24,0xb6,0x26,0xe8,0x6a,0x50,
                        0xe6,0xcc,0xc9,0xee,0xad,0x4c,0x90,0x14,
                        0x47,0xa8,0x14,0x74,0x6d,0x39,0x2d,0x49,
                        0x67,0xfa,0x1e,0x48,0x0c,0x45,0xbb,0x37,
                    };

// AES-CMAC Test vectors: https://tools.ietf.org/html/rfc4493#section-4:
/**
   --------------------------------------------------
   Subkey Generation
   K              2b7e1516 28aed2a6 abf71588 09cf4f3c
   AES-128(key,0) 7df76b0c 1ab899b3 3e42f047 b91b546f
   K1             fbeed618 35713366 7c85e08f 7236a8de
   K2             f7ddac30 6ae266cc f90bc11e e46d513b
   --------------------------------------------------

   --------------------------------------------------
   Example 1: len = 0
   M              <empty string>
   AES-CMAC       bb1d6929 e9593728 7fa37d12 9b756746
   --------------------------------------------------

   Example 2: len = 16
   M              6bc1bee2 2e409f96 e93d7e11 7393172a
   AES-CMAC       070a16b4 6b4d4144 f79bdd9d d04a287c
   --------------------------------------------------

   Example 3: len = 40
   M              6bc1bee2 2e409f96 e93d7e11 7393172a
                  ae2d8a57 1e03ac9c 9eb76fac 45af8e51
                  30c81c46 a35ce411
   AES-CMAC       dfa66747 de9ae630 30ca3261 1497c827
   --------------------------------------------------

   Example 4: len = 64
   M              6bc1bee2 2e409f96 e93d7e11 7393172a
                  ae2d8a57 1e03ac9c 9eb76fac 45af8e51
                  30c81c46 a35ce411 e5fbc119 1a0a52ef
                  f69f2445 df4f9b17 ad2b417b e66c3710
   AES-CMAC       51f0bebf 7e3b9d92 fc497417 79363cfe
   --------------------------------------------------
*/
uint8_t NIST_Key_128[] __attribute__ ((aligned (4))) =
{
    0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
};

uint8_t NIST_AES_CMAC_Empty_String_MAC_Key128[] __attribute__ ((aligned (4))) =
{
    0xbb, 0x1d, 0x69, 0x29, 0xe9, 0x59, 0x37, 0x28, 0x7f, 0xa3, 0x7d, 0x12, 0x9b, 0x75, 0x67, 0x46,
};
uint8_t NIST_AES_CMAC_Message2_Key128[] __attribute__ ((aligned (4))) =
{
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
};

uint8_t NIST_AES_CMAC_Message2_MAC_Key128[] __attribute__ ((aligned (4))) =
{
    0x07, 0x0a, 0x16, 0xb4, 0x6b, 0x4d, 0x41, 0x44, 0xf7, 0x9b, 0xdd, 0x9d, 0xd0, 0x4a, 0x28, 0x7c,
};
uint8_t NIST_AES_CMAC_Message4_Key128[] __attribute__ ((aligned (4))) =
{
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
};

uint8_t NIST_AES_CMAC_Message4_Signature_Key128[] __attribute__ ((aligned (4))) =
{
    0x51, 0xf0, 0xbe, 0xbf, 0x7e, 0x3b, 0x9d, 0x92, 0xfc, 0x49, 0x74, 0x17, 0x79, 0x36, 0x3c, 0xfe
};

uint8_t NIST_AES_CMAC_K1[] __attribute__ ((aligned (4))) =
{
    0xfb, 0xee, 0xd6, 0x18, 0x35, 0x71, 0x33, 0x66, 0x7c, 0x85, 0xe0, 0x8f, 0x72, 0x36, 0xa8, 0xde,
};

uint8_t NIST_AES_CMAC_K2[] __attribute__ ((aligned (4))) =
{
    0xf7, 0xdd, 0xac, 0x30, 0x6a, 0xe2, 0x66, 0xcc, 0xf9, 0x0b, 0xc1, 0x1e, 0xe4, 0x6d, 0x51, 0x3b,
};
#endif // INCLUDE_NVBOOT_AES_TEST_VECTORS_H
